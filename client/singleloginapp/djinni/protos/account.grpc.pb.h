// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: account.proto
#ifndef GRPC_account_2eproto__INCLUDED
#define GRPC_account_2eproto__INCLUDED

#include "account.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace account {

class Account final {
 public:
  static constexpr char const* service_full_name() {
    return "account.Account";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::account::CodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> AsyncrequestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(AsyncrequestUserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> PrepareAsyncrequestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(PrepareAsyncrequestUserLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest& request, ::account::CodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> AsyncrequestUserSign(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(AsyncrequestUserSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> PrepareAsyncrequestUserSign(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(PrepareAsyncrequestUserSignRaw(context, request, cq));
    }
    virtual ::grpc::Status checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::account::CodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> AsynccheckConnect(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(AsynccheckConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> PrepareAsynccheckConnect(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(PrepareAsynccheckConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::account::CodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> AsyncrequestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(AsyncrequestLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> PrepareAsyncrequestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(PrepareAsyncrequestLogoutRaw(context, request, cq));
    }
    virtual ::grpc::Status refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::account::CodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> AsyncrefreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(AsyncrefreshTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>> PrepareAsyncrefreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>>(PrepareAsyncrefreshTokenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestUserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void requestUserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void requestUserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestUserSign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void requestUserSign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void requestUserSign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void checkConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void checkConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void checkConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestLogout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void requestLogout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void requestLogout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void refreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void refreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void refreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* AsyncrequestUserLoginRaw(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* PrepareAsyncrequestUserLoginRaw(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* AsyncrequestUserSignRaw(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* PrepareAsyncrequestUserSignRaw(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* AsynccheckConnectRaw(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* PrepareAsynccheckConnectRaw(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* AsyncrequestLogoutRaw(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* PrepareAsyncrequestLogoutRaw(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* AsyncrefreshTokenRaw(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::CodeReply>* PrepareAsyncrefreshTokenRaw(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::account::CodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> AsyncrequestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(AsyncrequestUserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> PrepareAsyncrequestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(PrepareAsyncrequestUserLoginRaw(context, request, cq));
    }
    ::grpc::Status requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest& request, ::account::CodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> AsyncrequestUserSign(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(AsyncrequestUserSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> PrepareAsyncrequestUserSign(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(PrepareAsyncrequestUserSignRaw(context, request, cq));
    }
    ::grpc::Status checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::account::CodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> AsynccheckConnect(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(AsynccheckConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> PrepareAsynccheckConnect(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(PrepareAsynccheckConnectRaw(context, request, cq));
    }
    ::grpc::Status requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::account::CodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> AsyncrequestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(AsyncrequestLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> PrepareAsyncrequestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(PrepareAsyncrequestLogoutRaw(context, request, cq));
    }
    ::grpc::Status refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::account::CodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> AsyncrefreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(AsyncrefreshTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>> PrepareAsyncrefreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::CodeReply>>(PrepareAsyncrefreshTokenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      void requestUserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void requestUserLogin(::grpc::ClientContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void requestUserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void requestUserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      void requestUserSign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void requestUserSign(::grpc::ClientContext* context, const ::account::SignRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void requestUserSign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void requestUserSign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      void checkConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void checkConnect(::grpc::ClientContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void checkConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void checkConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      void requestLogout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void requestLogout(::grpc::ClientContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void requestLogout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void requestLogout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      void refreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void refreshToken(::grpc::ClientContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void refreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void refreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* AsyncrequestUserLoginRaw(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* PrepareAsyncrequestUserLoginRaw(::grpc::ClientContext* context, const ::account::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* AsyncrequestUserSignRaw(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* PrepareAsyncrequestUserSignRaw(::grpc::ClientContext* context, const ::account::SignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* AsynccheckConnectRaw(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* PrepareAsynccheckConnectRaw(::grpc::ClientContext* context, const ::account::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* AsyncrequestLogoutRaw(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* PrepareAsyncrequestLogoutRaw(::grpc::ClientContext* context, const ::account::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* AsyncrefreshTokenRaw(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::CodeReply>* PrepareAsyncrefreshTokenRaw(::grpc::ClientContext* context, const ::account::RefreshRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_requestUserLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_requestUserSign_;
    const ::grpc::internal::RpcMethod rpcmethod_checkConnect_;
    const ::grpc::internal::RpcMethod rpcmethod_requestLogout_;
    const ::grpc::internal::RpcMethod rpcmethod_refreshToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status requestUserLogin(::grpc::ServerContext* context, const ::account::LoginRequest* request, ::account::CodeReply* response);
    virtual ::grpc::Status requestUserSign(::grpc::ServerContext* context, const ::account::SignRequest* request, ::account::CodeReply* response);
    virtual ::grpc::Status checkConnect(::grpc::ServerContext* context, const ::account::ConnectRequest* request, ::account::CodeReply* response);
    virtual ::grpc::Status requestLogout(::grpc::ServerContext* context, const ::account::LogoutRequest* request, ::account::CodeReply* response);
    virtual ::grpc::Status refreshToken(::grpc::ServerContext* context, const ::account::RefreshRequest* request, ::account::CodeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_requestUserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestUserLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_requestUserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserLogin(::grpc::ServerContext* /*context*/, const ::account::LoginRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestUserLogin(::grpc::ServerContext* context, ::account::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::account::CodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_requestUserSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestUserSign() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_requestUserSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserSign(::grpc::ServerContext* /*context*/, const ::account::SignRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestUserSign(::grpc::ServerContext* context, ::account::SignRequest* request, ::grpc::ServerAsyncResponseWriter< ::account::CodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_checkConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_checkConnect() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_checkConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkConnect(::grpc::ServerContext* /*context*/, const ::account::ConnectRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckConnect(::grpc::ServerContext* context, ::account::ConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::account::CodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_requestLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestLogout() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_requestLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestLogout(::grpc::ServerContext* /*context*/, const ::account::LogoutRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestLogout(::grpc::ServerContext* context, ::account::LogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::account::CodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_refreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_refreshToken() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_refreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status refreshToken(::grpc::ServerContext* /*context*/, const ::account::RefreshRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrefreshToken(::grpc::ServerContext* context, ::account::RefreshRequest* request, ::grpc::ServerAsyncResponseWriter< ::account::CodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_requestUserLogin<WithAsyncMethod_requestUserSign<WithAsyncMethod_checkConnect<WithAsyncMethod_requestLogout<WithAsyncMethod_refreshToken<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestUserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_requestUserLogin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::account::LoginRequest, ::account::CodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::account::LoginRequest* request, ::account::CodeReply* response) { return this->requestUserLogin(context, request, response); }));}
    void SetMessageAllocatorFor_requestUserLogin(
        ::grpc::experimental::MessageAllocator< ::account::LoginRequest, ::account::CodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::LoginRequest, ::account::CodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_requestUserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserLogin(::grpc::ServerContext* /*context*/, const ::account::LoginRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* requestUserLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::account::LoginRequest* /*request*/, ::account::CodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* requestUserLogin(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::account::LoginRequest* /*request*/, ::account::CodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestUserSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_requestUserSign() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::account::SignRequest, ::account::CodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::account::SignRequest* request, ::account::CodeReply* response) { return this->requestUserSign(context, request, response); }));}
    void SetMessageAllocatorFor_requestUserSign(
        ::grpc::experimental::MessageAllocator< ::account::SignRequest, ::account::CodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::SignRequest, ::account::CodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_requestUserSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserSign(::grpc::ServerContext* /*context*/, const ::account::SignRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* requestUserSign(
      ::grpc::CallbackServerContext* /*context*/, const ::account::SignRequest* /*request*/, ::account::CodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* requestUserSign(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::account::SignRequest* /*request*/, ::account::CodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_checkConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_checkConnect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::account::ConnectRequest, ::account::CodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::account::ConnectRequest* request, ::account::CodeReply* response) { return this->checkConnect(context, request, response); }));}
    void SetMessageAllocatorFor_checkConnect(
        ::grpc::experimental::MessageAllocator< ::account::ConnectRequest, ::account::CodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::ConnectRequest, ::account::CodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_checkConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkConnect(::grpc::ServerContext* /*context*/, const ::account::ConnectRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* checkConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::account::ConnectRequest* /*request*/, ::account::CodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* checkConnect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::account::ConnectRequest* /*request*/, ::account::CodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_requestLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_requestLogout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::account::LogoutRequest, ::account::CodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::account::LogoutRequest* request, ::account::CodeReply* response) { return this->requestLogout(context, request, response); }));}
    void SetMessageAllocatorFor_requestLogout(
        ::grpc::experimental::MessageAllocator< ::account::LogoutRequest, ::account::CodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::LogoutRequest, ::account::CodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_requestLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestLogout(::grpc::ServerContext* /*context*/, const ::account::LogoutRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* requestLogout(
      ::grpc::CallbackServerContext* /*context*/, const ::account::LogoutRequest* /*request*/, ::account::CodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* requestLogout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::account::LogoutRequest* /*request*/, ::account::CodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_refreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_refreshToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::account::RefreshRequest, ::account::CodeReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::account::RefreshRequest* request, ::account::CodeReply* response) { return this->refreshToken(context, request, response); }));}
    void SetMessageAllocatorFor_refreshToken(
        ::grpc::experimental::MessageAllocator< ::account::RefreshRequest, ::account::CodeReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::RefreshRequest, ::account::CodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_refreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status refreshToken(::grpc::ServerContext* /*context*/, const ::account::RefreshRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* refreshToken(
      ::grpc::CallbackServerContext* /*context*/, const ::account::RefreshRequest* /*request*/, ::account::CodeReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* refreshToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::account::RefreshRequest* /*request*/, ::account::CodeReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_requestUserLogin<ExperimentalWithCallbackMethod_requestUserSign<ExperimentalWithCallbackMethod_checkConnect<ExperimentalWithCallbackMethod_requestLogout<ExperimentalWithCallbackMethod_refreshToken<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_requestUserLogin<ExperimentalWithCallbackMethod_requestUserSign<ExperimentalWithCallbackMethod_checkConnect<ExperimentalWithCallbackMethod_requestLogout<ExperimentalWithCallbackMethod_refreshToken<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_requestUserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestUserLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_requestUserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserLogin(::grpc::ServerContext* /*context*/, const ::account::LoginRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_requestUserSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestUserSign() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_requestUserSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserSign(::grpc::ServerContext* /*context*/, const ::account::SignRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_checkConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_checkConnect() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_checkConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkConnect(::grpc::ServerContext* /*context*/, const ::account::ConnectRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_requestLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestLogout() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_requestLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestLogout(::grpc::ServerContext* /*context*/, const ::account::LogoutRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_refreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_refreshToken() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_refreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status refreshToken(::grpc::ServerContext* /*context*/, const ::account::RefreshRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestUserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestUserLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_requestUserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserLogin(::grpc::ServerContext* /*context*/, const ::account::LoginRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestUserLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestUserSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestUserSign() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_requestUserSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserSign(::grpc::ServerContext* /*context*/, const ::account::SignRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestUserSign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_checkConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_checkConnect() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_checkConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkConnect(::grpc::ServerContext* /*context*/, const ::account::ConnectRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestLogout() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_requestLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestLogout(::grpc::ServerContext* /*context*/, const ::account::LogoutRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_refreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_refreshToken() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_refreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status refreshToken(::grpc::ServerContext* /*context*/, const ::account::RefreshRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrefreshToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestUserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_requestUserLogin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->requestUserLogin(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_requestUserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserLogin(::grpc::ServerContext* /*context*/, const ::account::LoginRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* requestUserLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* requestUserLogin(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestUserSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_requestUserSign() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->requestUserSign(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_requestUserSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestUserSign(::grpc::ServerContext* /*context*/, const ::account::SignRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* requestUserSign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* requestUserSign(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_checkConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_checkConnect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->checkConnect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_checkConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkConnect(::grpc::ServerContext* /*context*/, const ::account::ConnectRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* checkConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* checkConnect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_requestLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_requestLogout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->requestLogout(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_requestLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestLogout(::grpc::ServerContext* /*context*/, const ::account::LogoutRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* requestLogout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* requestLogout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_refreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_refreshToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->refreshToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_refreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status refreshToken(::grpc::ServerContext* /*context*/, const ::account::RefreshRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* refreshToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* refreshToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestUserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_requestUserLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::account::LoginRequest, ::account::CodeReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::account::LoginRequest, ::account::CodeReply>* streamer) {
                       return this->StreamedrequestUserLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_requestUserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestUserLogin(::grpc::ServerContext* /*context*/, const ::account::LoginRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestUserLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::LoginRequest,::account::CodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestUserSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_requestUserSign() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::account::SignRequest, ::account::CodeReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::account::SignRequest, ::account::CodeReply>* streamer) {
                       return this->StreamedrequestUserSign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_requestUserSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestUserSign(::grpc::ServerContext* /*context*/, const ::account::SignRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestUserSign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::SignRequest,::account::CodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_checkConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_checkConnect() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::account::ConnectRequest, ::account::CodeReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::account::ConnectRequest, ::account::CodeReply>* streamer) {
                       return this->StreamedcheckConnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_checkConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status checkConnect(::grpc::ServerContext* /*context*/, const ::account::ConnectRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcheckConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::ConnectRequest,::account::CodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_requestLogout() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::account::LogoutRequest, ::account::CodeReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::account::LogoutRequest, ::account::CodeReply>* streamer) {
                       return this->StreamedrequestLogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_requestLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestLogout(::grpc::ServerContext* /*context*/, const ::account::LogoutRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::LogoutRequest,::account::CodeReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_refreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_refreshToken() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::account::RefreshRequest, ::account::CodeReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::account::RefreshRequest, ::account::CodeReply>* streamer) {
                       return this->StreamedrefreshToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_refreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status refreshToken(::grpc::ServerContext* /*context*/, const ::account::RefreshRequest* /*request*/, ::account::CodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrefreshToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::RefreshRequest,::account::CodeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_requestUserLogin<WithStreamedUnaryMethod_requestUserSign<WithStreamedUnaryMethod_checkConnect<WithStreamedUnaryMethod_requestLogout<WithStreamedUnaryMethod_refreshToken<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_requestUserLogin<WithStreamedUnaryMethod_requestUserSign<WithStreamedUnaryMethod_checkConnect<WithStreamedUnaryMethod_requestLogout<WithStreamedUnaryMethod_refreshToken<Service > > > > > StreamedService;
};

}  // namespace account


#endif  // GRPC_account_2eproto__INCLUDED
