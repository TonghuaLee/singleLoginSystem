// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto

#include "todo.pb.h"
#include "todo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace todo {

static const char* Account_method_names[] = {
  "/todo.Account/requestAddCategory",
  "/todo.Account/requestFetchCategory",
  "/todo.Account/requestAddTodo",
  "/todo.Account/requestUpdateTodo",
};

std::unique_ptr< Account::Stub> Account::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Account::Stub> stub(new Account::Stub(channel));
  return stub;
}

Account::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_requestAddCategory_(Account_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestFetchCategory_(Account_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestAddTodo_(Account_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestUpdateTodo_(Account_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Account::Stub::requestAddCategory(::grpc::ClientContext* context, const ::todo::AddCategoryRequest& request, ::todo::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestAddCategory_, context, request, response);
}

void Account::Stub::experimental_async::requestAddCategory(::grpc::ClientContext* context, const ::todo::AddCategoryRequest* request, ::todo::CodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestAddCategory_, context, request, response, std::move(f));
}

void Account::Stub::experimental_async::requestAddCategory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::todo::CodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestAddCategory_, context, request, response, std::move(f));
}

void Account::Stub::experimental_async::requestAddCategory(::grpc::ClientContext* context, const ::todo::AddCategoryRequest* request, ::todo::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestAddCategory_, context, request, response, reactor);
}

void Account::Stub::experimental_async::requestAddCategory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::todo::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestAddCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::CodeReply>* Account::Stub::AsyncrequestAddCategoryRaw(::grpc::ClientContext* context, const ::todo::AddCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::todo::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestAddCategory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::todo::CodeReply>* Account::Stub::PrepareAsyncrequestAddCategoryRaw(::grpc::ClientContext* context, const ::todo::AddCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::todo::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestAddCategory_, context, request, false);
}

::grpc::Status Account::Stub::requestFetchCategory(::grpc::ClientContext* context, const ::todo::FetchCategoryRequest& request, ::todo::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestFetchCategory_, context, request, response);
}

void Account::Stub::experimental_async::requestFetchCategory(::grpc::ClientContext* context, const ::todo::FetchCategoryRequest* request, ::todo::CodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestFetchCategory_, context, request, response, std::move(f));
}

void Account::Stub::experimental_async::requestFetchCategory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::todo::CodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestFetchCategory_, context, request, response, std::move(f));
}

void Account::Stub::experimental_async::requestFetchCategory(::grpc::ClientContext* context, const ::todo::FetchCategoryRequest* request, ::todo::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestFetchCategory_, context, request, response, reactor);
}

void Account::Stub::experimental_async::requestFetchCategory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::todo::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestFetchCategory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::CodeReply>* Account::Stub::AsyncrequestFetchCategoryRaw(::grpc::ClientContext* context, const ::todo::FetchCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::todo::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestFetchCategory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::todo::CodeReply>* Account::Stub::PrepareAsyncrequestFetchCategoryRaw(::grpc::ClientContext* context, const ::todo::FetchCategoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::todo::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestFetchCategory_, context, request, false);
}

::grpc::Status Account::Stub::requestAddTodo(::grpc::ClientContext* context, const ::todo::AddTodoRequest& request, ::todo::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestAddTodo_, context, request, response);
}

void Account::Stub::experimental_async::requestAddTodo(::grpc::ClientContext* context, const ::todo::AddTodoRequest* request, ::todo::CodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestAddTodo_, context, request, response, std::move(f));
}

void Account::Stub::experimental_async::requestAddTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::todo::CodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestAddTodo_, context, request, response, std::move(f));
}

void Account::Stub::experimental_async::requestAddTodo(::grpc::ClientContext* context, const ::todo::AddTodoRequest* request, ::todo::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestAddTodo_, context, request, response, reactor);
}

void Account::Stub::experimental_async::requestAddTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::todo::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestAddTodo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::CodeReply>* Account::Stub::AsyncrequestAddTodoRaw(::grpc::ClientContext* context, const ::todo::AddTodoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::todo::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestAddTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::todo::CodeReply>* Account::Stub::PrepareAsyncrequestAddTodoRaw(::grpc::ClientContext* context, const ::todo::AddTodoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::todo::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestAddTodo_, context, request, false);
}

::grpc::Status Account::Stub::requestUpdateTodo(::grpc::ClientContext* context, const ::todo::UpdateTodoRequest& request, ::todo::CodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestUpdateTodo_, context, request, response);
}

void Account::Stub::experimental_async::requestUpdateTodo(::grpc::ClientContext* context, const ::todo::UpdateTodoRequest* request, ::todo::CodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestUpdateTodo_, context, request, response, std::move(f));
}

void Account::Stub::experimental_async::requestUpdateTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::todo::CodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestUpdateTodo_, context, request, response, std::move(f));
}

void Account::Stub::experimental_async::requestUpdateTodo(::grpc::ClientContext* context, const ::todo::UpdateTodoRequest* request, ::todo::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestUpdateTodo_, context, request, response, reactor);
}

void Account::Stub::experimental_async::requestUpdateTodo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::todo::CodeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestUpdateTodo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::todo::CodeReply>* Account::Stub::AsyncrequestUpdateTodoRaw(::grpc::ClientContext* context, const ::todo::UpdateTodoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::todo::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestUpdateTodo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::todo::CodeReply>* Account::Stub::PrepareAsyncrequestUpdateTodoRaw(::grpc::ClientContext* context, const ::todo::UpdateTodoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::todo::CodeReply>::Create(channel_.get(), cq, rpcmethod_requestUpdateTodo_, context, request, false);
}

Account::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::todo::AddCategoryRequest, ::todo::CodeReply>(
          [](Account::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::todo::AddCategoryRequest* req,
             ::todo::CodeReply* resp) {
               return service->requestAddCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::todo::FetchCategoryRequest, ::todo::CodeReply>(
          [](Account::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::todo::FetchCategoryRequest* req,
             ::todo::CodeReply* resp) {
               return service->requestFetchCategory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::todo::AddTodoRequest, ::todo::CodeReply>(
          [](Account::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::todo::AddTodoRequest* req,
             ::todo::CodeReply* resp) {
               return service->requestAddTodo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Account_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Account::Service, ::todo::UpdateTodoRequest, ::todo::CodeReply>(
          [](Account::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::todo::UpdateTodoRequest* req,
             ::todo::CodeReply* resp) {
               return service->requestUpdateTodo(ctx, req, resp);
             }, this)));
}

Account::Service::~Service() {
}

::grpc::Status Account::Service::requestAddCategory(::grpc::ServerContext* context, const ::todo::AddCategoryRequest* request, ::todo::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Account::Service::requestFetchCategory(::grpc::ServerContext* context, const ::todo::FetchCategoryRequest* request, ::todo::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Account::Service::requestAddTodo(::grpc::ServerContext* context, const ::todo::AddTodoRequest* request, ::todo::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Account::Service::requestUpdateTodo(::grpc::ServerContext* context, const ::todo::UpdateTodoRequest* request, ::todo::CodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace todo

