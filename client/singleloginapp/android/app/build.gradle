def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    sourceSets {
        main {
            java {
                srcDirs = [
                        'src/main/kotlin',
                        "../../djinni/generated-src/java",
                        "src/main/java",
                ]
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.broadli.singleloginapp"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                // The paths to the protoc and grpc_cpp_plugin binaries on the host system (codegen
                // is not cross-compiled to Android)
                cppFlags "-std=c++11 -frtti -fexceptions"
                arguments '-DANDROID_STL=c++_static'
                arguments '-DRUN_HAVE_POSIX_REGEX=0'
                arguments '-DRUN_HAVE_STD_REGEX=0'
                arguments '-DRUN_HAVE_STEADY_CLOCK=0'
                arguments '-Dprotobuf_BUILD_PROTOC_BINARIES=off'
                arguments '-DgRPC_BUILD_CODEGEN=off'
            }
//            ndk {
//                abiFilters 'armeabi-v7a'
//            }
        }
    }

    signingConfigs {
        release {
            keyAlias 'happy'
            keyPassword 'happybroad'
            storeFile file('../happy')
            storePassword 'happybroad'
        }
        debug {
            keyAlias 'happy'
            keyPassword 'happybroad'
            storeFile file('../happy')
            storePassword 'happybroad'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "com.google.code.gson:gson:2.8.6"
}
